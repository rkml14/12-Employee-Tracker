DROP DATABASE IF EXISTS employeetracker_db;
CREATE DATABASE employeetracker_db;
​
USE employeetracker_db;
​
CREATE TABLE department (
    id INT NOT NULL auto_increment PRIMARY KEY,
    name VARCHAR(30)
);
​
​CREATE TABLE roles (
    id INT NOT NULL auto_increment PRIMARY KEY,
    title: VARCHAR(30),
    department_id: INT,
    salary: DECIMAL    
    FOREIGN KEY (department_id) REFERENCES department(id)  
);
​​CREATE TABLE employee (
    id INT NOT NULL auto_increment PRIMARY KEY,
    first_name: VARCHAR(30) NOT NULL,
    last_name: VARCHAR(30) NOT NULL,
    role_id: INT,
    manager_id: INT,
    FOREIGN KEY (role_id) REFERENCES roles(id) 
);


SELECT
  student.first_name,
  student.last_name,
  course.name
FROM student
JOIN student_course
  ON student.id = student_course.student_id
JOIN course
  ON course.id = student_course.course_id;

  SELECT 
  employee.id,
  employee.first_name,
  employee.last_name,
  employee.manager_id,
  roles.title,
  roles.salary
  FROM employee
  JOIN roles
  ON employee = roles.role_id;  

DROP DATABASE IF EXISTS employeetracker_db;
CREATE DATABASE employeetracker_db;

USE employeetracker_db;

CREATE TABLE department (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(30) NOT NULL
);

CREATE TABLE role (
  id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  title VARCHAR(30) UNIQUE NOT NULL,
  department_id INT UNSIGNED NOT NULL,
  salary DECIMAL UNSIGNED NOT NULL,
  INDEX dep_ind (department_id),
  CONSTRAINT fk_department FOREIGN KEY (department_id) REFERENCES department(id) 
  ON DELETE CASCADE
);

CREATE TABLE employee (
  id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  first_name VARCHAR(30) NOT NULL,
  last_name VARCHAR(30) NOT NULL,
  role_id INT UNSIGNED NOT NULL,
  INDEX role_ind (role_id),
  CONSTRAINT fk_role FOREIGN KEY (role_id) REFERENCES role(id) ON DELETE CASCADE,
  manager_id INT UNSIGNED,
  INDEX man_ind (manager_id),
  CONSTRAINT fk_manager FOREIGN KEY (manager_id) REFERENCES employee(id) ON DELETE SET NULL
);

function allRoles() {
    db.query("SELECT role.id, role.title, department.name AS department, role.salary FROM role JOIN department ON role.id = department.id;", function (err, results) {
        if (err) {
            console.log(err)
            process.exit(1);
        }
        console.table(results);
        startMenu();
    });
};

function allRoles() {
    db.query("SELECT role.id, role.title, role.salary, department.name FROM role LEFT JOIN department on role.department_id=department.id", function (err, results) {
        if (err) {
            console.log(err)
            process.exit(1);
        }
        console.table(results);
        startMenu();
    });
};



'SELECT employee.role_id, role.title FROM employee LEFT JOIN role ON employee.role_id=role.id;'

"SELECT role.id, role.title, role.salary, department.name FROM role LEFT JOIN department ON role.department_id=department.id"


SELECT employee.id, employee.first_name, employee.last_name, role.title, department.name AS Department, role.salary, CONCAT(manager.first_name,' ', manager.last_name) AS manager  FROM employee  JOIN role ON employee.role_id = role.id JOIN department ON role.department_id = department.id LEFT JOIN employee AS manager ON employee.manager_id = manager.id;

